// -----------------------------------------------------------
// File: ESC_StandardSCI_Protocal.c
//
// -----------------------------------------------------------
// Release Date: 2018-08-24;
// Authour: Liu Shiwei;
// -----------------------------------------------------------
 # include "stm32f10x_usart.h"
 
 # include "ESC_TypeDef.h"
 # include "ESC_StandardSCI_Protocal.h"

// 4. local variables
// -----------------------------------------------------------
// A.local variable definition
//   .........................................................
//   Uint16 bff_StdSciRx[StdSci_RxBuffLength] = {0};

     struct STDSCI_PACK_RX pck_StdSciRx;
     struct STDSCI_PACK_BUFF buffer_pck_StdSciRx;

//   struct STDSCI_RX_MEM
//   {
//     Uint16 *pHead;
//     Uint16 offset;
//     Uint16 length;
//   } sMemStdSciRx;
//
     enum StdSci_RX_State {Idle, Receiving};
     enum StdSci_RX_State stt_StdSciRx;
		 
// B. local variable initialization
//   .........................................................
     void InitVrbls_StdSci (void)
     {
//     sMemStdSciRx.pHead  = bff_StdSciRx;
//     sMemStdSciRx.offset = 0;
//     sMemStdSciRx.length = StdSci_RxBuffLength;
			 
       pck_StdSciRx.validity = False;
       buffer_pck_StdSciRx.cntr = 0;
       stt_StdSciRx = Idle;
     }
		 
     struct STDSCI_PACK_RX StdSci_Read(void){return pck_StdSciRx;}

// x.read received package
// -----------------------------------------------------------


// 5.CRC residue generator
// -----------------------------------------------------------
// Crc_Rsd = MOD[(frame[0]<<32+frame[1]<<24+frame[2]<<16+
//                frame[3]<<8),CRC]
//
// pck ---- data package, of which the CRC residue need to
//          be calculated;
//
// this function returns the CRC residue calculation result.
   Uint16 StdSci_CrcRsdGnrtr(union STDSCI_PACK pck)
   {
     Uint16 i = 0;
     Uint16 j = 0;
     Uint32 tmp_rsd = 0;

     for (i=0; i<(StdSci_FrameBytes-1); i++)
     {
       tmp_rsd += (Uint32)(pck.buffer[i]);
     
       if (tmp_rsd & 0x0100)
       {
         tmp_rsd ^= (StdSci_CRC<<1);
       }
       else
       {;}
     
       for(j=0; j<StdSci_CharBits; j++)
       {
         if(tmp_rsd & 0x0080)
         {
           tmp_rsd ^= StdSci_CRC;
         }
         else
         {;}
     
         tmp_rsd <<= 1;
       }
     } /*for (i=0; i<(StdSci_FrameBytes-1); i++)*/

     return (Uint16)tmp_rsd;

   }/*Uint16 StdSci_CrcRsdGnrtr(union STDSCI_PACK pck)*/

// 7.package transmit function
// -----------------------------------------------------------
// this function is called to transmit packed data through
// a certain SCI TX channel;
   void StdSci_Send(USART_TypeDef* USARTx, Uint16 frm_DataType, Uint16 frm_Data)
   {
     Uint16 i = 0;
     union STDSCI_PACK pck;

     pck.frame.PackHead = StdSci_PackHead;
     pck.frame.DataLwr  = frm_Data & 0xFF;
     pck.frame.DataHghr = frm_Data >> StdSci_CharBits;
     pck.frame.DataType = frm_DataType & 0xFF;
     pck.frame.CrcRsd   = StdSci_CrcRsdGnrtr(pck);

     for(i=0; i<StdSci_FrameBytes; i++)
     {
       USART_SendData(USARTx, pck.buffer[i]);
       while(USART_GetFlagStatus(USARTx, USART_FLAG_TC)==RESET);
     }
   }

// 10.SCI RX interrupt server
// -----------------------------------------------------------

   void StdSci_Receive(USART_TypeDef* USARTx)
   {
     Uint16 frame;
     union STDSCI_PACK pck = buffer_pck_StdSciRx.pck;
     Uint16 offset = buffer_pck_StdSciRx.cntr;
		 
     if(USART_GetITStatus(USARTx, USART_IT_RXNE) != RESET) //has RX INT flag been set?
     {
       frame = USART_ReceiveData(USART1);    // read RX data register

//       USART_SendData(USARTx,frame);
//       while(USART_GetFlagStatus(USARTx, USART_FLAG_TC)==RESET);

       switch (stt_StdSciRx)
       {
         case Idle:
           if(frame == StdSci_PackHead)
           {
             pck.frame.PackHead = frame;
             offset++;
             stt_StdSciRx = Receiving;
           }
           break;
         case Receiving:
           pck.buffer[offset] = frame;
      
           if((offset == (StdSci_FrameBytes-1))||((StdSci_FrameBytes-1)<offset))
           {
             offset = 0;
             stt_StdSciRx = Idle;
             
             if (frame == StdSci_CrcRsdGnrtr(pck))
             {
               pck_StdSciRx.pck = pck;
               pck_StdSciRx.validity = True;

             # if 0 /*only for test*/
               /*for test*/
               USART_SendData(USARTx,pck_StdSciRx.pck.buffer[0]);
               while(USART_GetFlagStatus(USART1, USART_FLAG_TC)==RESET);
               
               USART_SendData(USARTx,pck_StdSciRx.pck.buffer[1]);
               while(USART_GetFlagStatus(USART1, USART_FLAG_TC)==RESET);
               
               USART_SendData(USARTx,pck_StdSciRx.pck.buffer[2]);
               while(USART_GetFlagStatus(USART1, USART_FLAG_TC)==RESET);
               
               USART_SendData(USARTx,pck_StdSciRx.pck.buffer[3]);
               while(USART_GetFlagStatus(USART1, USART_FLAG_TC)==RESET);
               
               USART_SendData(USARTx,pck_StdSciRx.pck.buffer[4]);
               while(USART_GetFlagStatus(USART1, USART_FLAG_TC)==RESET);
               
               USART_SendData(USARTx,pck_StdSciRx.validity);
               while(USART_GetFlagStatus(USART1, USART_FLAG_TC)==RESET);
               /*for test*/
             # endif
             }
             else
             {
               pck_StdSciRx.validity = False;
             } /*if (frame == StdSci_CrcRsdGnrtr(pck))*/
           }
           else
           {
             offset++;
             stt_StdSciRx = Receiving;
           } /*if((offset == (StdSci_FrameBytes-1))||((StdSci_FrameBytes-1)<offset))*/

           break;
         default:;
       }/*switch (stt_StdSciRx)*/
     }/*if(USART_GetITStatus(USARTx, USART_IT_RXNE) != RESET)*/ 

     buffer_pck_StdSciRx.pck   =  pck;
     buffer_pck_StdSciRx.cntr  =  offset;
   }

# if 0
   void RxiSvr_FH_0v0(void)
   {
     Uint16* pntr_rxpck = bffr_RX;
     Uint16* pntr_rxrcv = vSciCom.pRxRcv;
     Uint16 validtiy;
     union FHDAT_PCK_0v0 pckTx;

     //ESTOP0;

//   receive data frames and put them to the buffering area
     pntr_rxrcv=rx_receive(pntr_rxrcv,bffr_RX,UPPRLMT_RXBFR);

     pntr_rxpck = pntr_rxrcv - NumRxFrm;
     if(pntr_rxpck < bffr_RX)
     {
       pntr_rxpck += UPPRLMT_RXBFR;
     }
     else
     {;}

//   pack up the received frames and check if they are valid
     validtiy = rx_pack( pntr_rxpck, pntr_rxrcv, bffr_RX,    \
                         UPPRLMT_RXBFR);


//   transmit the same package just received back to the host
//   if it is valid, or transimt back 0x0000 if it is not
     if (validtiy == VALID)
     {
       pckTx = PckRx_FH_0v0;

//     sort the received data according to their types
       rx_sort();
     }
     else
     {
       pckTx = tx_pack(0x00, 0x00);
     }

     tx_send(pckTx);

     //SciaRegs.SCIFFRX.bit.RXFFOVRCLR = 1;
     //SciaRegs.SCIFFRX.bit.RXFFINTCLR = 1;
     vSciCom.pRxRcv = pntr_rxrcv;
   }


// 8.data receive function
// -----------------------------------------------------------
// after received a certain number of frames, put them into a
// dedicated buffer area one after another;
//
// *pntr ------- pointer where the first frame ought to be put
//               to;
// *pntr_org --- pointer where the head of the buffer area is;
// *upr_lmt ---- the upper limit of the buffer area address
//               offset;
//
// this function returns the pointer where the first frame of
// the next group of frames ought to be put to.
//

   Uint16* rx_receive(Uint16 *pntr, Uint16 *pntr_org, Uint16 \
                      upr_lmt)
   {
   # if FHCSC_0v0
     Uint16 i = 0;

     for (i=0; i<NumRxFrm; i++)
     {
       *pntr = SCIREGS.SCIRXBUF.all;

       if((++pntr - pntr_org) == upr_lmt)
       {
         pntr = pntr_org;
       }
       else
       {;}
     }

     return pntr;
   # endif /*"# if FHCSC_0v0"*/
   }

// 9.data pack function for the received frames
// -----------------------------------------------------------
// *pntr ------ pointer from where the buffer should be search;
// *pntr_ddl -- pointer to where the buffer should be searched;
// *pntr_org -- pointer where the buffer begins;
// upr_lmt ---- the upper limit of the buffer area address
//             offset;
//
// this function returns the package validaty verification
// result.
//
   Uint16 rx_pack(Uint16 *pntr, Uint16 *pntr_ddl,
		          Uint16 *pntr_org, Uint16 upr_lmt)
   {
   # if FHCSC_0v0
     Uint16 i = 0;
     Uint16 k = 0;
     Uint16 tmp_rsd = 0x00FF;
     Uint16 tmp_flg = INVALID;
     Uint16 *tmp_pntr;
     union FHDAT_PCK_0v0 tmp_pck;

  // shearch the buffer area until the pointer reaches the
  // dead line or the received package is correct:
     while((pntr != pntr_ddl) && (tmp_rsd != 0))
     {
    // move the pointer increasingly until it reaches the
    // deadline or the package head is found, restore the
    // pointer to the buffer beginning point if necessary: 
       while ((*pntr != PCK_HEAD) && (pntr != pntr_ddl))
       {
         if((++pntr - pntr_org) == upr_lmt)
         {
           pntr = pntr_org;
         }
         else
         {;}
       }

    // should the package head is found, put a certain
    // number of frames in the buffer area successivly after
    // the package head into a union temporarily, the type of
    // which is in consist with the defined data package
    // format;
       if(*pntr == PCK_HEAD)
       {
    	 for (i=0; i<StdPack_FrameBytes; i++)
         {
           tmp_pntr = pntr+i;

           if (((tmp_pntr - pntr_org) == upr_lmt)
            || (upr_lmt < (tmp_pntr - pntr_org)))
           {
             tmp_pntr -= upr_lmt;
           }
           else
           {;}

           tmp_pck.frames[i] = *tmp_pntr;

           *tmp_pntr = k++;
         }


      // calculate the CRC residue, find if it is equal to the
      // provided CRC residue in the certain frame;
         tmp_rsd = clcu_CrcRsd(tmp_pck);
         tmp_rsd -= tmp_pck.frame.CrcRsd;
       }
       else
       {;}
     }

  // determin whether the received package is correct or not
  // according to the equality of two residues, and save the
  // package or not accordingly;
     if (tmp_rsd == 0)
     {
       PckRx_FH_0v0 = tmp_pck;
       tmp_flg = VALID;
     }
     else
     {
       tmp_flg = INVALID;
     }

     return tmp_flg;
   # endif /*"# if FHCSC_0v0"*/
   }

// 10.received data sort
// -----------------------------------------------------------
// this function read the data and data-type frames in the
// received package, and put the data to different variables
// according to its data-type.
//
   void rx_sort(void)
   {
     Uint16 data;
     Uint16 type;

     data = ((PckRx_FH_0v0.frame.DataHghr<<CHR_BTS) +        \
              PckRx_FH_0v0.frame.DataLwr);

     type = PckRx_FH_0v0.frame.DataType;

     switch (type)
     {
       case SCIDP_INSTR1: // machine 1 working instruction
            set_instrHstM1(data);
            break;

       case SCIDP_INSTR2: // machine 2 working instruction
            set_instrHstM2(data);
            break;

       case SCIDP_ISPRNT: // print instruction
            set_instrPrnt(data);
            break;

       case SCIDP_SPTG1: // machine 1 target speed
            Set_spdTgM1((Float32)data);
            break;

       case SCIDP_SPTG2: // machine 2 target speed
            Set_spdTgM2((Float32)data);
            break;

       case SCIDP_DTTG1: // machine 1 target duty
            set_dtTgM1(data);
            break;

       case SCIDP_DTTG2: // machine 2 target duty
            set_dtTgM2(data);
            break;

       case SCIDP_VRPH1: // machine 1 virtual phase
            set_vrPhsM1(data);
            break;

       case SCIDP_VRPH2: // machine 2 virtual phase
            set_vrPhsM2(data);
            break;

       default:
            break;
     };
   }
# endif




#if 0

 # define INVALID 0   // package frames are invalid
 # define VALID   1   // package frames are valid
 # define NumRxFrm 10 // number of frames received

// 1.communicaiton package declaration
// -----------------------------------------------------------
 # if FHCSC_0v0
   //transmitter package
   union FHDAT_PCK_0v0 PckTx_FH_0v0;
   //receiver package:
   union FHDAT_PCK_0v0 PckRx_FH_0v0;
 # endif /*"# if FHCSC_0v0"*/

// 2."get" and "set" mathod prototypes
// -----------------------------------------------------------
// A.set machine working instructions
     void set_instrHstM1(Uint16 instr);
     void set_instrHstM2(Uint16 instr);
//
// B.set machine target speeds
     void Set_spdTgM1(Float32 s);
     void Set_spdTgM2(Float32 s);
//
// C.set machine target duties
     void set_dtTgM1(Uint16 d);
     void set_dtTgM2(Uint16 d);
//
// D.set machine virtual phase (only for test)
     void set_vrPhsM1(Uint16 ph);
     void set_vrPhsM2(Uint16 ph);
//
// F.get machine  states
     Uint16 Get_sttM1(void);
     Uint16 Get_sttM2(void);
//
// G.get machine target speed
     Uint16 Get_spdFbM1(void);
     Uint16 Get_spdFbM2(void);
//
// xx.xx.get machine rotor phases
     Uint16 Get_phsM1(void);
     Uint16 Get_phsM2(void);
//
// H.get MServo efficiency
     Uint16 get_effMServoM1(void);
     Uint16 get_effMServoM2(void);
//
// xxx.get machine chopper duty
     Uint16 Get_dutyM1(void);
     Uint16 Get_dutyM2(void);
//
// X.get servo faults
     Uint16 Get_fltsM1(void);
     Uint16 Get_fltsM2(void);
//
// I.set print instruction
     void set_instrPrnt(Uint16);
//
// J.get back-EMF events
     Uint16 get_evA2(void);
     Uint16 get_evB2(void);
     Uint16 get_evC2(void);
//
// L.get physical parameters  
     Uint16 get_iA1(void);
     Uint16 get_iB1(void);
     Uint16 get_iC1(void);
     Uint16 get_iBus1(void);
     Uint16 get_uBus1(void);
     Uint16 get_tmpr1(void);
//
     Uint16 get_iA2(void);
     Uint16 get_iB2(void);
     Uint16 get_iC2(void);
     Uint16 get_iBus2(void);
     Uint16 get_uBus2(void);
     Uint16 get_tmpr2(void);
//
// 3.receiving data unpack buffer definition
// -----------------------------------------------------------
// this buffer stores data unpacked from package received
// through a certain SCI RX channel temporarily.
//
 # define UPPRLMT_RXBFR 32
   Uint16 bffr_RX[UPPRLMT_RXBFR] = {0};

// 4. local variables
// -----------------------------------------------------------
// A.local variable definition
//   .........................................................
     struct VRBLS_SciCom_MNBRS
     {
       Uint16 *pRxRcv;
       Uint16 vI;
       Uint16 vJ;
//       Uint16 dSttM1Last;
//       Uint16 dSttM2Last;
     } vSciCom;
//
// B. local variable initialization
//   .........................................................
     void InitVrbls_SciComLcls (void)
     {
       vSciCom.pRxRcv = bffr_RX;
       vSciCom.vI = 0;
       vSciCom.vJ = 0;
     }


// 6.data pack function of the frames to be transmitted
// -----------------------------------------------------------
// add package head, datatype, CRC residue, ..., and pack
// them up with data to be transmitted in consist with
// a certain communication protocol.
//
// dataype ---- defines the data type of the data frames;
// data ------- data needs to be put into the data frames.
//
   union FHDAT_PCK_0v0 tx_pack(Uint16 frame_DataType, Uint16 frame_Data)
   {
   # if FHCSC_0v0
     Uint16 tmp_rsd = 0; // temporary residue
     union FHDAT_PCK_0v0 pckout;

  // write the head character into the head frame:
     pckout.frame.PackHead = PCK_HEAD;
  // write data lower bits into the lower data bits frame:
     pckout.frame.DataLwr  = frame_Data & 0xFF;
  // write data higher bits into the higher data bits frame:
     pckout.frame.DataHghr = frame_Data >> CHR_BTS;
  // write the data type into the data type frame:
     pckout.frame.DataType = frame_DataType& 0xFF;

  // calculate the CRC residue:
     tmp_rsd = clcu_CrcRsd(pckout);

  // write the CRC residue into the CRC residue frame:
     pckout.frame.CrcRsd = tmp_rsd & 0xFF;

     return pckout;
   # endif /*"# if FHCSC_0v0"*/
   }




//
// -----------------------------------------------------------
   void TxiSvr_FH_0v0(void)
   {
     union FHDAT_PCK_0v0 pckTx;
//
//   servo 1 virtual FSM state (0x20)
     pckTx = tx_pack( SCIDP_SRVST1, Get_sttM1() );
     tx_send(pckTx);
//
//   servo 2 virtual FSM state (0x21)
     pckTx = tx_pack( SCIDP_SRVST2, Get_sttM2() );
     tx_send(pckTx);
//
//   machine 1 feed-back speed (0x22)
     pckTx = tx_pack(SCIDP_SPFB1, Get_spdFbM1());
     tx_send(pckTx);
//
//   machine 2 feed-back speed (0x23)
     pckTx = tx_pack(SCIDP_SPFB2, Get_spdFbM2());
     tx_send(pckTx);
//
//   machine 1 rotor phase (0x24)
     pckTx = tx_pack(SCIDP_PHS1, Get_phsM1());
     tx_send(pckTx);
//
//   machine 2 rotor phase (0x25)
     pckTx = tx_pack(SCIDP_PHS2, Get_phsM2());
     tx_send(pckTx);
//
//   machine 1 faults (0x26)
     pckTx = tx_pack(SCIDP_FLTID1, Get_fltsM1());
     tx_send(pckTx);
//
//   machine 2 faults (0x27)
     pckTx = tx_pack(SCIDP_FLTID2, Get_fltsM2());
     tx_send(pckTx);
//
//   machine 1 chopper duty (0x28)
     pckTx = tx_pack(SCIDP_DUTY1, Get_dutyM1());
     tx_send(pckTx);
//
//   machine 2 chopper duty (0x29)
     pckTx = tx_pack(SCIDP_DUTY2, Get_dutyM2());
     tx_send(pckTx);
//
//   servo 1 code efficiency (0x2E)
     pckTx = tx_pack(SCIDP_EFFC1, get_effMServoM1());
     tx_send(pckTx);
//
//   servo 2 code efficiency (0x2F)
     pckTx = tx_pack(SCIDP_EFFC2, get_effMServoM2());
     tx_send(pckTx);
//
//   bridge 1 bus current (0x32)
     pckTx = tx_pack(SCIDP_IBUS1, get_iBus1());
     tx_send(pckTx);
//
//   bridge 2 bus current (0x33)
     pckTx = tx_pack(SCIDP_IBUS2, get_iBus2());
     tx_send(pckTx);
//
//   bridge 1 phase A current (0x34)
     pckTx = tx_pack(SCIDP_IA1, get_iA1());
     tx_send(pckTx);
//
//   bridge 2 phase A current (0x35)
     pckTx = tx_pack(SCIDP_IA2, get_iA2());
     tx_send(pckTx);
//
//   bridge 1 phase B current (0x36)
     pckTx = tx_pack(SCIDP_IB1, get_iB1());
     tx_send(pckTx);
//
//   bridge 2 phase B current (0x37)
     pckTx = tx_pack(SCIDP_IB2, get_iB2());
     tx_send(pckTx);
//
//   bridge 1 phase C current (0x38)
     pckTx = tx_pack(SCIDP_IC1, get_iC1());
     tx_send(pckTx);
//
//   bridge 2 phase C current (0x39)
     pckTx = tx_pack(SCIDP_IC2, get_iC2());
     tx_send(pckTx);
//
//   bridge 1 bus voltage (0x3A)
     pckTx = tx_pack(SCIDP_UBUS1, get_uBus1());
     tx_send(pckTx);
//
//   bridge 2 bus voltage (0x3B)
     pckTx = tx_pack(SCIDP_UBUS2, get_uBus2());
     tx_send(pckTx);
//
//   driver board temperature 1 (0x3C)
     pckTx = tx_pack(SCIDP_TMPR1, get_tmpr1());
     tx_send(pckTx);
//
//   driver board temperature 2 (0x3D)
     pckTx = tx_pack(SCIDP_TMPR2, get_tmpr2());
     tx_send(pckTx);
   }

#endif

// no more.
// -----------------------------------------------------------

