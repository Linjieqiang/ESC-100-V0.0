// -----------------------------------------------------------
// File: ESC_StandardSCI_Protocal.c
// Description: Defines mathods for standard package receiving
// and sending.
// -----------------------------------------------------------
// Release Date: 2018-08-24;
// Authour: Liu Shiwei;
// -----------------------------------------------------------
//
// 1st.macros
// -----------------------------------------------------------
// # include "stm32f10x_usart.h"
 # include "ESC_StandardSCI_Protocal.h"

// 2nd.variables
// -----------------------------------------------------------
// A.local variable definition
//   .........................................................
     struct STDSCI_PACK_RX pck_StdSciRx;
     struct STDSCI_PACK_BUFF buffer_pck_StdSciRx;
     enum StdSci_RX_State {Idle, Receiving};
     enum StdSci_RX_State stt_StdSciRx;

// 3rd.functions
// -----------------------------------------------------------
// 1.CRC residue generator
// ...........................................................
   /**
   @brief Generate CRC residue.
          Crc_Rsd = MOD[(frame[0]<<32+frame[1]<<24+
                        frame[2]<<16+frame[3]<<8),CRC]
    
   @param pck: SCI data pack which the generator is applied to
   @retval CRC residue.
   */
   u16 StdSci_CrcRsdGnrtr(union STDSCI_PACK pck)
   {
     u16 i = 0;
     u16 j = 0;
     u32 tmp_rsd = 0;

     for (i=0; i<(StdSci_FrameBytes-1); i++)
     {
       tmp_rsd += (u32)(pck.buffer[i]);
     
       if (tmp_rsd & 0x0100)
       {
         tmp_rsd ^= (StdSci_CRC<<1);
       }
       else
       {;}
     
       for(j=0; j<StdSci_CharBits; j++)
       {
         if(tmp_rsd & 0x0080)
         {
           tmp_rsd ^= StdSci_CRC;
         }
         else
         {;}
     
         tmp_rsd <<= 1;
       }
     } /*for (i=0; i<(StdSci_FrameBytes-1); i++)*/

     return (u16)tmp_rsd;

   }/*u16 StdSci_CrcRsdGnrtr(union STDSCI_PACK pck)*/

// 2.package send function
// ...........................................................
   /**
   @brief Sent SCI package to Host.
    
   @param USARTx: USART channel.
   @param frm_DataType: Data type defined by user.
   @param frm_Data: Data to be sent to Host.
   @retval None.
   */
   void StdSci_Send(USART_TypeDef* USARTx, u16 frm_DataType, u16 frm_Data)
   {
     u16 i = 0;
     union STDSCI_PACK pck;

     pck.frame.PackHead = StdSci_PackHead;
     pck.frame.DataLwr  = frm_Data & 0xFF;
     pck.frame.DataHghr = frm_Data >> StdSci_CharBits;
     pck.frame.DataType = frm_DataType & 0xFF;
     pck.frame.CrcRsd   = StdSci_CrcRsdGnrtr(pck);

     for(i=0; i<StdSci_FrameBytes; i++)
     {
       USART_SendData(USARTx, pck.buffer[i]);
       while(USART_GetFlagStatus(USARTx, USART_FLAG_TC)==RESET);
     }
   }

// 3.package receive function
// ...........................................................
   /**
   @brief receive data from Host, put them into
          "buffer_pck_StdSciRx.pck" if package head has been
          detected and varify its validity.
   @param USARTx: USART channel.
   @retval None.
   */
   void StdSci_Receive(USART_TypeDef* USARTx)
   {
     u16 frame;
     union STDSCI_PACK pck = buffer_pck_StdSciRx.pck;
     u16 offset = buffer_pck_StdSciRx.cntr;

  // check if RX INT flag has been set?	 
     if(USART_GetITStatus(USARTx, USART_IT_RXNE) != RESET)
     {
    // read RX data register
       frame = USART_ReceiveData(USART1); 

       switch (stt_StdSciRx)
       {
         case Idle:
           if(frame == StdSci_PackHead)
           {
             pck.frame.PackHead = frame;
             offset++;
             stt_StdSciRx = Receiving;
           }
           break;
         case Receiving:
           pck.buffer[offset] = frame;
      
           if((offset == (StdSci_FrameBytes-1))||((StdSci_FrameBytes-1)<offset))
           {
             offset = 0;
             stt_StdSciRx = Idle;
             
             if (frame == StdSci_CrcRsdGnrtr(pck))
             {
               pck_StdSciRx.pck = pck;
               pck_StdSciRx.validity = True;

             # if 0 /*only for test*/
               /*for test*/
               USART_SendData(USARTx,pck_StdSciRx.pck.buffer[0]);
               while(USART_GetFlagStatus(USART1, USART_FLAG_TC)==RESET);
               
               USART_SendData(USARTx,pck_StdSciRx.pck.buffer[1]);
               while(USART_GetFlagStatus(USART1, USART_FLAG_TC)==RESET);
               
               USART_SendData(USARTx,pck_StdSciRx.pck.buffer[2]);
               while(USART_GetFlagStatus(USART1, USART_FLAG_TC)==RESET);
               
               USART_SendData(USARTx,pck_StdSciRx.pck.buffer[3]);
               while(USART_GetFlagStatus(USART1, USART_FLAG_TC)==RESET);
               
               USART_SendData(USARTx,pck_StdSciRx.pck.buffer[4]);
               while(USART_GetFlagStatus(USART1, USART_FLAG_TC)==RESET);
               
               USART_SendData(USARTx,pck_StdSciRx.validity);
               while(USART_GetFlagStatus(USART1, USART_FLAG_TC)==RESET);
               /*for test*/
             # endif
             }
             else
             {
               pck_StdSciRx.validity = False;
             } /*if (frame == StdSci_CrcRsdGnrtr(pck))*/
           }
           else
           {
             offset++;
             stt_StdSciRx = Receiving;
           } /*if((offset == (StdSci_FrameBytes-1))||((StdSci_FrameBytes-1)<offset))*/

           break;
         default:;
       }/*switch (stt_StdSciRx)*/
     }/*if(USART_GetITStatus(USARTx, USART_IT_RXNE) != RESET)*/ 

     buffer_pck_StdSciRx.pck   =  pck;
     buffer_pck_StdSciRx.cntr  =  offset;
   }

// 4.received package read
// ...........................................................
   /**
   @brief Read received package out of its buffer.
   @param None.
   @retval Received package.
   */
     struct STDSCI_PACK_RX StdSci_Read(void){return pck_StdSciRx;}

// 5.local variable initialization
// ...........................................................
// @ brief Initialize local variables.
// @ param None.
// @ retval None.
//  
     void InitVrbls_StdSci (void)
     {
       pck_StdSciRx.validity = False;
       buffer_pck_StdSciRx.cntr = 0;
       stt_StdSciRx = Idle;
     }

// no more.
// -----------------------------------------------------------

